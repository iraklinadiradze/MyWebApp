// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(CoreDBContext))]
    [Migration("20211002074129_Migration19")]
    partial class Migration19
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Model.Account.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountDimensionId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityForeignId1")
                        .HasColumnType("int");

                    b.Property<int?>("EntityForeignId2")
                        .HasColumnType("int");

                    b.Property<int?>("EntityForeignId3")
                        .HasColumnType("int");

                    b.Property<int?>("EntityForeignId4")
                        .HasColumnType("int");

                    b.Property<int?>("EntityForeignId5")
                        .HasColumnType("int");

                    b.Property<int?>("EntityForeignId6")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDimensionId");

                    b.ToTable("Account ", "acc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.AccountBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountBalanceCount")
                        .HasColumnType("int");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("BalanceTransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaxPostTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<decimal>("balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("decrease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("increase")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountBalance", "acc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.AccountDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityId1")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId2")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId3")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId4")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId5")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId6")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId1");

                    b.HasIndex("EntityId2");

                    b.HasIndex("EntityId3");

                    b.HasIndex("EntityId4");

                    b.HasIndex("EntityId5");

                    b.HasIndex("EntityId6");

                    b.ToTable("AccountDimension", "acc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("AccountTranSeq")
                        .HasColumnType("bigint");

                    b.Property<bool>("Eod")
                        .HasColumnType("bit");

                    b.Property<long?>("PostOrderRefId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RefVersion")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceEntityId")
                        .HasColumnType("int");

                    b.Property<long?>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubReferenceEntityId")
                        .HasColumnType("int");

                    b.Property<long?>("SubReferenceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<decimal>("balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("decrease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("increase")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostOrderRefId");

                    b.HasIndex("ReferenceEntityId");

                    b.HasIndex("SubReferenceEntityId");

                    b.ToTable("Transaction", "acc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.TransactionOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReferenceEntityId")
                        .HasColumnType("int");

                    b.Property<long?>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubReferenceEntityId")
                        .HasColumnType("int");

                    b.Property<long?>("SubReferenceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceEntityId");

                    b.HasIndex("SubReferenceEntityId");

                    b.ToTable("TransactionOrder", "acc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Client.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsBank")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Client", "cli");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Client.LegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OfficeAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RegistrationCountryID")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("TaxRegDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationCountryID");

                    b.ToTable("LegalEntity", "cli");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Client.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CitizenShipId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitizenShipId");

                    b.ToTable("Person", "cli");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country", "cor");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Core.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CurrencyDescrip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Currency", "cor");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Core.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Entity", "cor");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", "cor");
                });

            modelBuilder.Entity("DataAccessLayer.Model.GeneralLedger.FinAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinAccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinAccount", "gl");
                });

            modelBuilder.Entity("DataAccessLayer.Model.GeneralLedger.GlAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinAccountId");

                    b.ToTable("GlAccount", "gl");
                });

            modelBuilder.Entity("DataAccessLayer.Model.GeneralLedger.GlTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GlTransaction", "gl");
                });

            modelBuilder.Entity("DataAccessLayer.Model.GeneralLedger.GlTransactionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GlAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GlAccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("GlTransactionDetail", "gl");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EntityForeignId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityProcCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InventoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsSingle")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWholeQuantity")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProcInInventory")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("Inventory", "inv");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Location", "inv");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ReceiveFinPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReceiveFinPosted")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiveLocationId")
                        .HasColumnType("int");

                    b.Property<bool?>("ReceivePosted")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReceiveQtyPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReceiveQtyPosted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("SendFinPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendFinPosted")
                        .HasColumnType("bit");

                    b.Property<int>("SendLocationId")
                        .HasColumnType("int");

                    b.Property<bool?>("SendPosted")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendQtyPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendQtyPosted")
                        .HasColumnType("bit");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveLocationId");

                    b.HasIndex("SendLocationId");

                    b.ToTable("Movement", "inv");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.MovementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("MovementId")
                        .HasColumnType("int");

                    b.Property<bool?>("ReceiveFinPosted")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReceivePosted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ReceiveQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("ReceiveQtyPosted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ReceiveValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("SendFinPosted")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendPosted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SendQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("SendQtyPosted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SendValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("MovementId");

                    b.ToTable("MovementDetail", "inv");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllocStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("Allocated")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("FinPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("FinPosted")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<bool>("ProcInInventory")
                        .HasColumnType("bit");

                    b.Property<string>("PurchaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("QtyPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("QtyPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAllocCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostInvoicedEqu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFinalCostEqu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<decimal>("xrate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Purchase", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseAllocationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseAllocationSourceId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseAllocationSourceId");

                    b.HasIndex("PurchaseDetailId");

                    b.ToTable("PurchaseAllocationResult", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseAllocationSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PurchaseAllocationSchema", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseAllocationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocPurchaseDetailId")
                        .HasColumnType("int");

                    b.Property<int>("GlAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseAllocSchemaId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseAllocationSchemaId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseAllocationSourceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllocPurchaseDetailId");

                    b.HasIndex("PurchaseAllocationSchemaId");

                    b.HasIndex("PurchaseAllocationSourceTypeId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseAllocationSource", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseAllocationSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PurchaseAllocationSourceType", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AddCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Allocated")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostCalculated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostCalculatedEqu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostInvoicedEqu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostInvoicedWithoutVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("FinPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("FinalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GlAccountId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseDetailPostTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseDraftId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseDraftVersion")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("QtyCalculated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("QtyPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("VatInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseDetailPostTypeId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseDetail", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseDetailPostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PurchaseDetailPostType", "prc");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Brand", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<byte[]>("ts")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Feature", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.FeatureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureValueName")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValue", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsSingle")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTangible")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWholeQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProductLabelId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductLabelId");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("Product", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureValueId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeature", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductGroupTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductGroupTemplateId");

                    b.ToTable("ProductGroup", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroupTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsSingle")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTangible")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWholeQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("ProductGroupTemplateName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("ProductGroupTemplate", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroupTemplateFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("ProductGroupTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ProductGroupTemplateId");

                    b.ToTable("ProductGroupTemplateFeature", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ProductLabelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("ProductLabel", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IdentifyProducts")
                        .HasColumnType("bit");

                    b.Property<bool>("IdentifyProductsAfterRegistration")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<bool>("RegisterBrandProps")
                        .HasColumnType("bit");

                    b.Property<bool>("RegisterProducts")
                        .HasColumnType("bit");

                    b.Property<bool>("RegisterPurchaseDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("RegisterSalesPrices")
                        .HasColumnType("bit");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductProcessor", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandIdDictionary")
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductGroupIdDictionary")
                        .HasColumnType("int");

                    b.Property<string>("ProductGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductLabelId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductLabelIdDictionary")
                        .HasColumnType("int");

                    b.Property<string>("ProductLabelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductProcessorId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductProcessorId");

                    b.ToTable("ProductProcessorDetail", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeatureValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeatureValueId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureValueIdDictionary")
                        .HasColumnType("int");

                    b.Property<int>("ProductProcessorDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductProcessorDetailId");

                    b.ToTable("ProductProcessorProductFeature", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorSalePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductProcessorDetailId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleSchemaId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductProcessorDetailId");

                    b.ToTable("ProductProcessorSalePrice", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductUnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductUnit", "pro");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.ReturnProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cogs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<bool>("FinPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("FinPosted")
                        .HasColumnType("bit");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("NominalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NominalPriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("QtyPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("QtyPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SchemaPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SaleId");

                    b.ToTable("ReturnProduct", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<bool>("FinPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("FinPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<bool>("QtyPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("QtyPosted")
                        .HasColumnType("bit");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ShopId");

                    b.ToTable("Sale", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SalePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalePayment", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SalePaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SalePaymentType", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SaleProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cogs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<bool>("FinPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("FinPosted")
                        .HasColumnType("bit");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("NominalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NominalPriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("Posted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("QtyPostStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("QtyPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SchemaPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleProduct", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SaleSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SaleSchema", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SaleSchemaDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SaleSchemaId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleSchemaId");

                    b.ToTable("SaleSchemaDetail", "pos");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.Account", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Account.AccountDimension", "AccountDimension")
                        .WithMany()
                        .HasForeignKey("AccountDimensionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountDimension");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.AccountBalance", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.AccountDimension", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Core.Entity", "Entity1")
                        .WithMany()
                        .HasForeignKey("EntityId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "Entity2")
                        .WithMany()
                        .HasForeignKey("EntityId2")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "Entity3")
                        .WithMany()
                        .HasForeignKey("EntityId3")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "Entity4")
                        .WithMany()
                        .HasForeignKey("EntityId4")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "Entity5")
                        .WithMany()
                        .HasForeignKey("EntityId5")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "Entity6")
                        .WithMany()
                        .HasForeignKey("EntityId6")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Entity1");

                    b.Navigation("Entity2");

                    b.Navigation("Entity3");

                    b.Navigation("Entity4");

                    b.Navigation("Entity5");

                    b.Navigation("Entity6");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.Transaction", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Account.TransactionOrder", "TransactionOrder")
                        .WithMany()
                        .HasForeignKey("PostOrderRefId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "ReferenceEntity")
                        .WithMany()
                        .HasForeignKey("ReferenceEntityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "SubReferenceEntity")
                        .WithMany()
                        .HasForeignKey("SubReferenceEntityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("ReferenceEntity");

                    b.Navigation("SubReferenceEntity");

                    b.Navigation("TransactionOrder");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Account.TransactionOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Core.Entity", "ReferenceEntity")
                        .WithMany()
                        .HasForeignKey("ReferenceEntityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Core.Entity", "SubReferenceEntity")
                        .WithMany()
                        .HasForeignKey("SubReferenceEntityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ReferenceEntity");

                    b.Navigation("SubReferenceEntity");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Client.LegalEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Client.Client", "Client")
                        .WithOne("LegalEntity")
                        .HasForeignKey("DataAccessLayer.Model.Client.LegalEntity", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Core.Country", "Country")
                        .WithMany("LegalEntity")
                        .HasForeignKey("RegistrationCountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Client.Person", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Core.Country", "Country")
                        .WithMany("Person")
                        .HasForeignKey("CitizenShipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Client.Client", "Client")
                        .WithOne("Person")
                        .HasForeignKey("DataAccessLayer.Model.Client.Person", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccessLayer.Model.GeneralLedger.GlAccount", b =>
                {
                    b.HasOne("DataAccessLayer.Model.GeneralLedger.FinAccount", "FinAccount")
                        .WithMany()
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinAccount");
                });

            modelBuilder.Entity("DataAccessLayer.Model.GeneralLedger.GlTransactionDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Model.GeneralLedger.GlAccount", "GlAccount")
                        .WithMany()
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.GeneralLedger.GlTransaction", "GlTransaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GlAccount");

                    b.Navigation("GlTransaction");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.Inventory", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.ProductUnit", "ProductUnit")
                        .WithMany()
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Product");

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.Movement", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Inventory.Location", "ReceiveLocation")
                        .WithMany()
                        .HasForeignKey("ReceiveLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Inventory.Location", "SendLocation")
                        .WithMany()
                        .HasForeignKey("SendLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceiveLocation");

                    b.Navigation("SendLocation");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.MovementDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Inventory.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Inventory.Movement", "Movement")
                        .WithMany("MovementDetail")
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Movement");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.Purchase", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Core.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseAllocationResult", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Procurment.PurchaseAllocationSource", "PurchaseAllocationSource")
                        .WithMany()
                        .HasForeignKey("PurchaseAllocationSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Procurment.PurchaseDetail", "PurchaseDetail")
                        .WithMany()
                        .HasForeignKey("PurchaseDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PurchaseAllocationSource");

                    b.Navigation("PurchaseDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseAllocationSource", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Procurment.PurchaseDetail", "PurchaseDetail")
                        .WithMany()
                        .HasForeignKey("AllocPurchaseDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Procurment.PurchaseAllocationSchema", "PurchaseAllocationSchema")
                        .WithMany()
                        .HasForeignKey("PurchaseAllocationSchemaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Model.Procurment.PurchaseAllocationSourceType", "PurchaseAllocationSourceType")
                        .WithMany()
                        .HasForeignKey("PurchaseAllocationSourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Procurment.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("PurchaseAllocationSchema");

                    b.Navigation("PurchaseAllocationSourceType");

                    b.Navigation("PurchaseDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Procurment.PurchaseDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Inventory.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Inventory.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Procurment.PurchaseDetailPostType", "PurchaseDetailPostType")
                        .WithMany()
                        .HasForeignKey("PurchaseDetailPostTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Procurment.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Purchase");

                    b.Navigation("PurchaseDetailPostType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.FeatureValue", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.Feature", "Feature")
                        .WithMany("FeatureValue")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Product", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.ProductGroup", "ProductGroup")
                        .WithMany("Product")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.ProductLabel", "ProductLabel")
                        .WithMany("Product")
                        .HasForeignKey("ProductLabelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.ProductUnit", "ProductUnit")
                        .WithMany("Product")
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductLabel");

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductFeature", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.FeatureValue", "FeatureValue")
                        .WithMany()
                        .HasForeignKey("FeatureValueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.Product", "Product")
                        .WithMany("ProductFeature")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FeatureValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroup", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.ProductCategory", "ProductCategory")
                        .WithMany("ProductGroup")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.ProductGroupTemplate", "ProductGroupTemplate")
                        .WithMany("ProductGroup")
                        .HasForeignKey("ProductGroupTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductGroupTemplate");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroupTemplate", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.ProductUnit", "ProductUnit")
                        .WithMany("ProductGroupTemplate")
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroupTemplateFeature", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Product.ProductGroupTemplate", "ProductGroupTemplate")
                        .WithMany("ProductGroupTemplateFeature")
                        .HasForeignKey("ProductGroupTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("ProductGroupTemplate");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductLabel", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.Brand", "Brand")
                        .WithMany("ProductLabel")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.ProductProcessor", "ProductProcessor")
                        .WithMany("ProductProcessorDetail")
                        .HasForeignKey("ProductProcessorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductProcessor");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorProductFeature", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.ProductProcessorDetail", "ProductProcessorDetail")
                        .WithMany("ProductProcessorProductFeature")
                        .HasForeignKey("ProductProcessorDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductProcessorDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorSalePrice", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.ProductProcessorDetail", "ProductProcessorDetail")
                        .WithMany("ProductProcessorSalePrice")
                        .HasForeignKey("ProductProcessorDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductProcessorDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.ReturnProduct", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Inventory.Inventory", "SaleInventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Sale.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("SaleInventory");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.Sale", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Core.User", "ConsultantUser")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Core.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Inventory.Location", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConsultantUser");

                    b.Navigation("OwnerUser");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SalePayment", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Sale.SalePaymentType", "SalePaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Sale.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("SalePaymentType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SaleProduct", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Inventory.Inventory", "SaleInventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Sale.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("SaleInventory");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Sale.SaleSchemaDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Sale.SaleSchema", "SaleSchema")
                        .WithMany()
                        .HasForeignKey("SaleSchemaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleSchema");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Client.Client", b =>
                {
                    b.Navigation("LegalEntity");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Core.Country", b =>
                {
                    b.Navigation("LegalEntity");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Inventory.Movement", b =>
                {
                    b.Navigation("MovementDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Brand", b =>
                {
                    b.Navigation("ProductLabel");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Feature", b =>
                {
                    b.Navigation("FeatureValue");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.Product", b =>
                {
                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductCategory", b =>
                {
                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroup", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductGroupTemplate", b =>
                {
                    b.Navigation("ProductGroup");

                    b.Navigation("ProductGroupTemplateFeature");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductLabel", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessor", b =>
                {
                    b.Navigation("ProductProcessorDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductProcessorDetail", b =>
                {
                    b.Navigation("ProductProcessorProductFeature");

                    b.Navigation("ProductProcessorSalePrice");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Product.ProductUnit", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ProductGroupTemplate");
                });
#pragma warning restore 612, 618
        }
    }
}
