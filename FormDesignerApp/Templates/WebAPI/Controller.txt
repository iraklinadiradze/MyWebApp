using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MediatR;

using Application.Common;
using Application.Model.[###moduleName###];

using Application.Domains.[###moduleName###].[###entityName###].Queries.Get[###entityName###];
using Application.Domains.[###moduleName###].[###entityName###].Queries.Get[###entityName###]List;
using Application.Domains.[###moduleName###].[###entityName###].Commands.Create[###entityName###];
using Application.Domains.[###moduleName###].[###entityName###].Commands.Update[###entityName###];
using Application.Domains.[###moduleName###].[###entityName###].Commands.Delete[###entityName###];

namespace WebAPI.Controllers
{
    //   [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class [###entityName###]Controller : ControllerBase
    {
        private IMediator _mediator;

        public [###entityName###]Controller(IMediator mediator)
        {
            _mediator = mediator;
        }

        // GET: api/[###entityName###]/5
        [HttpGet("{id}")]
        public async Task<ActionResult<[###entityName###]>> Get[###entityName###](int id)
        {
            var [###entityName###] = await _mediator.Send(new Get[###entityName###]Query { Id = id });

            return [###entityName###];
        }

        // PUT: api/[###entityName###]/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPut("{id}")]
        public async Task<ActionResult<[###entityName###]>> Put[###entityName###](int id, [###entityName###] [###entityName###])
        {
            if (id != [###entityName###].Id)
            {
                return BadRequest();
            }

            var result = await _mediator.Send(new Update[###entityName###]Command { [###entityName###] = [###entityName###]});

            return result; //  CreatedAtAction("Create[###entityName###]", result); // NoContent();
        }

        // POST: api/[###entityName###]
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost]
        public async Task<ActionResult<[###entityName###]>> Post[###entityName###]([###entityName###] [###entityName###])
        {
            //            _context.[###entityName###].Add([###entityName###]);
            var result = await _mediator.Send(new Create[###entityName###]Command { [###entityName###] = [###entityName###]});

            return result;
        }

        // DELETE: api/[###entityName###]/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<[###entityName###]>> Delete[###entityName###](int id)
        {

            await _mediator.Send(new Delete[###entityName###]Command { Id = id});

            return NoContent();
        }


        // GET: api/[###entityName###]/5
        [Route("[###entityName###]View")]
        [HttpGet]
        public async Task<ActionResult> Get[###entityName###]View(
            [###FilterParameters###]
      )
        {
            var result = await _mediator.Send(new Get[###entityName###]ListQuery
            {
                [###CommandQueryParameters###]
            }
            );

            return Ok(result.ToList());
        }

    }
}
