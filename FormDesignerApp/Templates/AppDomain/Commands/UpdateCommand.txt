using MediatR;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Application.Model.[###moduleName###];
using Application;

using Application.Common.Interfaces;
using Application.Common.Exceptions;
using Application.Common;
using Serilog;


namespace Application.Domains.[###moduleName###].[###entityName###].Commands.Update[###entityName###]
{
    public class Update[###entityName###]Command : IRequest<Application.Model.[###moduleName###].[###entityName###]>
    {
        public ModuleEnum SenderId { get; set; } = ModuleEnum.mdUndefined;
        public Application.Model.[###moduleName###].[###entityName###] [###entityName###] { get; set; }
    }

    public class Update[###entityName###]CommandHandler : IRequestHandler<Update[###entityName###]Command, Application.Model.[###moduleName###].[###entityName###]>
    {
        private readonly IMediator _mediator;
        private readonly ICoreDBContext _context;
        private readonly Serilog.ILogger _logger;

        public Update[###entityName###]CommandHandler(IMediator mediator, ICoreDBContext context, Serilog.ILogger logger)
        {
           _mediator = mediator;
           _context = context;
           _logger = logger;
        }

        public async Task<Application.Model.[###moduleName###].[###entityName###]> Handle(Update[###entityName###]Command request, CancellationToken cancellationToken)
        {

            var entity = request.[###entityName###];

            var _entity = await _context.[###entityName###].FindAsync(request.[###entityName###].Id);

            if (_entity == null)
            {
                throw new NotFoundException(nameof([###entityName###]), entity.Id);
            }

            _context.[###entityName###].Update(entity); // Add(entity);

            await _context.SaveChangesAsync(cancellationToken);

            //await _mediator.Publish(new CustomerCreated { CustomerId = entity.CustomerId }, cancellationToken);

            return entity;
         }

    }

}
