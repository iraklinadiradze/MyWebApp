using System;
using System.Collections.Generic;
using System.Text;

using System.Threading;
using System.Threading.Tasks;
using MediatR;

using Application.Model.[###moduleName###];
using Application;

using Application.Common.Interfaces;
using Application.Common.Exceptions;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace Application.Domains.[###moduleName###].[###entityName###].Queries.Get[###entityName###]List
{

    public class Get[###entityName###]ListQuery : IRequest<List<[###entityName###]View>>
    {
//        public int? id { get; set; }
//        public int? topRecords { get; set; }
//        public string? name { get; set; }

          [###entityFilterParameters###]
    }

    public class Get[###entityName###]ListQueryHandler : IRequestHandler<Get[###entityName###]ListQuery, List<[###entityName###]View>>
    {

        private readonly IMediator _mediator;
        private readonly ICoreDBContext _context;


        public Get[###entityName###]ListQueryHandler(IMediator mediator, ICoreDBContext context)
        {
            _mediator = mediator;
            _context = context;
        }


        public async Task<List<[###entityName###]View>> Handle(Get[###entityName###]ListQuery request, CancellationToken cancellationToken)
        {

           var result = from e in _context.[###entityName###]
                        [###RelatedentitySelect###]
                        select new [###entityName###]View
                           {
                             [###EntityProperties###]
                           };


            [###entityFilterStatements###]

            return (List<[###entityName###]View>)await result.ToListAsync(cancellationToken);
        }

    }
}
