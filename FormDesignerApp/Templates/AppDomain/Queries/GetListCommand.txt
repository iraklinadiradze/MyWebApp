using System;
using System.Collections.Generic;
using System.Text;

using System.Threading;
using System.Threading.Tasks;
using MediatR;

using DataAccessLayer.Model.[###moduleName###];
using DataAccessLayer;

using Application.Common.Interfaces;
using Application.Common.Exceptions;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace Application.Domains.[###moduleName###].[###entityName###].Queries.Get[###entityName###]List
{

    public class Get[###entityName###]ListQuery : IRequest<[###entityName###]View>
    {
        public int? id { get; set; }
        public int? topRecords { get; set; }
        public string? name { get; set; }
    }

    public class Get[###entityName###]ListQueryHandler : IRequestHandler<Get[###entityName###]ListQuery, [###entityName###]View>
    {

        private readonly IMediator _mediator;
        private readonly ICoreDBContext _context;


        public Get[###entityName###]ListQueryHandler(IMediator mediator, ICoreDBContext context)
        {
            _mediator = mediator;
            _context = context;
        }

        public async Task<[###entityName###]View> Handle(Get[###entityName###]ListQuery request, CancellationToken cancellationToken)
        {

            var result = from a in _context.[###entityName###] select a;
                
            if (request.id != null)
                result = result.Where(r => r.Id == request.id);

            if (request.topRecords != null)
                result = result.Take((int)request.topRecords);

            if (request.firstName != null)
                result = result.Where(r => r.Name.StartsWith(request.name));

            return ([###entityName###]View)await result.ToListAsync(cancellationToken);
        }

    }
}
